var dbPromise=idb.open("restaurant_data",3,function(e){switch(e.oldVersion){case 0:e.createObjectStore("restaurants",{keyPath:"id"});case 1:e.createObjectStore("reviews",{keyPath:"id"});case 2:e.createObjectStore("offline_reviews",{keyPath:"id"})}});class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static fetchRestaurants(e){dbPromise.then(function(e){return e.transaction("restaurants","readonly").objectStore("restaurants").getAll()}).then(function(t){0!==t.length?e(null,t):fetch(DBHelper.DATABASE_URL).then(function(e){return e.json()}).then(t=>{dbPromise.then(function(n){var o=n.transaction("restaurants","readwrite"),r=o.objectStore("restaurants");for(var a of t)r.put(a);return e(null,t),o.complete}).then(function(){console.log("Restaurants added")}).catch(function(e){console.log(e)})})})}static fetchRestaurantById(e,t){dbPromise.then(function(t){return t.transaction("restaurants","readonly").objectStore("restaurants").get(parseInt(e))}).then(function(n){n?t(null,n):fetch(DBHelper.DATABASE_URL+"/"+e).then(function(e){return e.json()}).then(function(e){t(null,e)}).catch(function(e){console.log(e)})})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((n,o)=>{if(n)t(n,null);else{const n=o.filter(t=>t.cuisine_type==e);t(null,n)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((n,o)=>{if(n)t(n,null);else{const n=o.filter(t=>t.neighborhood==e);t(null,n)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,n){DBHelper.fetchRestaurants((o,r)=>{if(o)n(o,null);else{let o=r;"all"!=e&&(o=o.filter(t=>t.cuisine_type==e)),"all"!=t&&(o=o.filter(e=>e.neighborhood==t)),n(null,o)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].neighborhood);this.fetchAllReviews(),this.syncReviews();const o=t.filter((e,n)=>t.indexOf(e)==n);e(null,o)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].cuisine_type),o=t.filter((e,n)=>t.indexOf(e)==n);e(null,o)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return e.photograph?`/img/${e.photograph}`+".jpg":"img/10.jpg"}static tinyImageUrlForRestaurant(e){return e.photograph?`/img-tiny/${e.photograph}`+".jpg":"img-tiny/10.jpg"}static smallImageUrlForRestaurant(e){return e.photograph?`/img-small/${e.photograph}`+".jpg":"img-small/10.jpg"}static mediumImageUrlForRestaurant(e){return e.photograph?`/img-medium/${e.photograph}`+".jpg":"img-medium/10.jpg"}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}static fetchAllReviews(){dbPromise.then(function(e){return e.transaction("reviews","readonly").objectStore("reviews").getAll()}).then(function(e){0!==e.length?console.log(e):fetch("http://localhost:1337/reviews/").then(e=>e.json()).then(e=>dbPromise.then(t=>{const n=t.transaction("reviews","readwrite"),o=n.objectStore("reviews");return e.forEach(e=>{o.put(e)}),n.complete})).catch(e=>console.log("Error "+e))})}static fetchReviews(e,t){dbPromise.then(function(e){return e.transaction("reviews","readonly").objectStore("reviews").getAll()}).then(function(n){if(n){const o=n.filter(t=>t.restaurant_id==e);t(null,o),console.log(o)}else fetch("http://localhost:1337/reviews/?restaurant_id="+e).then(e=>e.json()).then(function(e){t(null,e)}).catch(e=>console.log("Error "+e))})}static saveReview(){const e=self.restaurant.id,t=document.getElementById("review_name").value,n=document.getElementById("review_comments").value,o=document.getElementById("review_rating").value,r=Date.now(),a=Date.now(),s={id:e,name:t,rating:parseInt(o),comments:n,createdAt:r,updatedAt:a};return DBHelper.postReview(s,(e,t)=>{e&&console.log(e)})}static postReview(e,t){console.log(e);const n={id:Date.now()+Math.random(),comments:e.comments,name:e.name,rating:e.rating,restaurant_id:e.id,createdAt:e.createdAt,updatedAt:e.updatedAt};navigator.onLine||(console.log("offline"),dbPromise.then(e=>{const t=e.transaction("offline_reviews","readwrite");return t.objectStore("offline_reviews").put(n),t.complete})),fetch("http://localhost:1337/reviews/",{method:"POST",body:JSON.stringify(n),headers:{"Content-Type":"application/json; charset=utf-8"},review:JSON.stringify(e)}).then(e=>e.json()).then(e=>{console.log("Log:",e),t(null,e)}).catch(function(e){console.log(e)}),dbPromise.then(e=>{const t=e.transaction("reviews","readwrite");return t.objectStore("reviews").put(n),t.complete})}static syncReviews(){dbPromise.then(function(e){return e.transaction("offline_reviews","readonly").objectStore("offline_reviews").getAll()}).then(function(e){0!==e.length&&fetch("http://localhost:1337/reviews/",{method:"POST",body:JSON.stringify(e),headers:{"Content-Type":"application/json; charset=utf-8"},review:JSON.stringify(e)}).then(e=>e.json()).then(e=>{console.log("Log:",e)}).then(dbPromise.then(function(e){return e.transaction("offline_reviews","readwrite").objectStore("offline_reviews").clear()})).then(e=>console.log("data deleted")).catch(function(e){console.log(e)})})}static setFavorite(){const e=self.restaurant.id,t=self.restaurant.is_favorite;console.log("current favorite state:",t),"true"==t?DBHelper.toggleFavorite(e,!1):DBHelper.toggleFavorite(e,!0)}static toggleFavorite(e,t){fetch("http://localhost:1337/restaurants/"+e+"/?is_favorite="+t,{method:"POST",headers:{"Content-Type":"application/json; charset=utf-8"},value:JSON.stringify(t)}).then(e=>e.json()).then(e=>console.log("favorite updated on server. New value is: ",t)),dbPromise.then(n=>{const o=n.transaction("restaurants","readwrite"),r=o.objectStore("restaurants");r.get(e).then(function(e){return e.is_favorite=String(t),r.put(e),o.complete})}).then(function(e){console.log("favorite updated on IndexedDb. New value is: ",t)}).catch(function(e){console.log(e)}),window.location.reload()}}